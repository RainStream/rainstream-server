#pragma once

struct SandBox
{
	std::function<Json(Json params)> getProducerRtpParametersMapping;
	std::function<Json(Json params, Json caps)> getConsumableRtpParameters;
};

namespace Object
{
	Json assign(Json target, Json source);
}

namespace ortc
{
	/**
	 * Generate RTP capabilities for the room based on the given media codecs and
	 * rainstream supported RTP capabilities. It may throw.
	 *
	 * @param {array<RoomMediaCodec>]} mediaCodecs
	 *
	 * @return {RTCRtpCapabilities}
	 */
	Json generateRoomRtpCapabilities(Json mediaCodecs);

	/**
	 * Checks whether aCaps is a valid subset of bCaps. It throws otherwise.
	 *
	 * @param {RTCRtpCapabilities} aCaps
	 * @param {RTCRtpCapabilities} bCaps
	 */
	bool assertCapabilitiesSubset(Json aCaps, Json bCaps);

	/**
	 * Generate a mapping of codec payload types and header extension ids that maps
	 * the RTP parameters of a Producer and the associated values in the RTP
	 * capabilities of the Room.
	 * It may throw if invalid or non supported RTP parameters are given.
	 *
	 * @param {RTCRtpParameters} params
	 * @param {RTCRtpCapabilities} caps
	 *
	 * @return {Object}
	 */
	Json getProducerRtpParametersMapping(Json params, Json caps);

	/**
	 * Generate RTP parameters for Consumers given the RTP parameters of a Producer
	 * and the RTP capabilities of the Room.
	 * It may throw if invalid or non supported RTP parameters are given.
	 *
	 * @param {RTCRtpParameters} params
	 * @param {RTCRtpCapabilities} caps
	 * @param {Object} rtpMapping - As generated by getProducerRtpParametersMapping().
	 *
	 * @return {RTCRtpParameters}
	 */
	Json getConsumableRtpParameters(Json params, Json caps, Json rtpMapping);

	/**
	 * Generate RTP parameters for a specific Consumer.
	 *
	 * NOTE: It"s up to the remote Consumer to check the codecs and decide whether it
	 * can enable this Consumer or not.
	 *
	 * @param {RTCRtpParameters} consumableRtpParameters - Consumable RTP parameters.
	 * @param {RTCRtpCapabilities} rtpCapabilities - Peer RTP capabilities.
	 *
	 * @return {RTCRtpParameters}
	 */
	Json getConsumerRtpParameters(Json consumableRtpParameters, Json rtpCapabilities);

	void assertCodecCapability(Json codec);

	bool matchCodecs(Json aCodec, Json bCodec);

	bool matchHeaderExtensions(Json aExt, Json bExt);

}
